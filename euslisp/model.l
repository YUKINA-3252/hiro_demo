(defun wrapping-side ()
  (setq p5-assoc (list 1 2 3 4 6))
  (dolist (x p5-assoc)
    (send (elt (*paper* . bodies) (- 5 1)) :assoc (elt (*paper* . bodies) (- x 1))))
  (send (elt (*paper* . bodies) (- 5 1)) :rotate -pi/2 :x)
  (send (elt (*paper* . bodies) (- 5 1)) :translate (float-vector 0 (/ box-z 2) (/ box-z 2)) :world)
  (send *irtviewer* :draw-objects)
  (dolist (x p5-assoc)
    (send (elt (*paper* . bodies) (- 5 1)) :dissoc (elt (*paper* . bodies) (- x 1)))
    (send box-coords :assoc (elt (*paper* . bodies) (- x 1))))

  (setq p11-assoc (list 10 11 13 14 15 16)) ;; p10-1 p10-2 p12 p13 p14 p15
  (dolist (x p11-assoc)
    (send (elt (*paper* . bodies) (- 12 1)) :assoc (elt (*paper* . bodies) (- x 1))))
  (send (elt (*paper* . bodies) (- 12 1)) :rotate pi/2 :x)
  (send (elt (*paper* . bodies) (- 12 1)) :translate (float-vector 0 (* -1 (/ box-z 2)) (/ box-z 2)) :world)
  (send *irtviewer* :draw-objects)
  (dolist (x p11-assoc)
    (send (elt (*paper* . bodies) (- 12 1)) :dissoc (elt (*paper* . bodies) (- x 1)))
    (send box-coords :assoc (elt (*paper* . bodies) (- x 1)))))

(defun wrapping-up ()
  (setq p2-assoc (list 1 3))
  (setq paper-y-end (*paper* . paper-y-end))
  (dolist (x p2-assoc)
    (send (elt (*paper* . bodies) (- 2 1)) :assoc (elt (*paper* . bodies) (- x 1))))
  (send (elt (*paper* . bodies) (- 2 1)) :rotate pi/2 :x)
  (setq offset (- (elt (send (send (elt (*paper* . bodies) (- 2 1)) :copy-worldcoords) :worldpos) 2) (elt (send (send (send box-coords :copy-worldcoords) :translate (float-vector 0 0 (/ box-z 2)) :world) :worldpos) 2)))
  (print offset)
  (send (elt (*paper* . bodies) (- 2 1)) :translate (float-vector 0 (/ paper-y-end 2) (* -1 offset)) :world)
  (send *irtviewer* :draw-objects)
  (dolist (x p2-assoc)
    (send (elt (*paper* . bodies) (- 2 1)) :dissoc (elt (*paper* . bodies) (- x 1)))
    (send box-coords :assoc (elt (*paper* . bodies) (- x 1))))

  (setq p14-assoc (list 14 16)) ;; p13 p15
  (dolist (x p14-assoc)
    (send (elt (*paper* . bodies) (- 15 1)) :assoc (elt (*paper* . bodies) (- x 1))))
  (send (elt (*paper* . bodies) (- 15 1)) :rotate pi/2 :x)
  (send (elt (*paper* . bodies) (- 15 1)) :translate (float-vector 0 (* -1 (/ paper-y-end 2)) (* -1 offset)) :world)
  (send *irtviewer* :draw-objects)
  (dolist (x p14-assoc)
    (send (elt (*paper* . bodies) (- 15 1)) :dissoc (elt (*paper* . bodies) (- x 1)))
    (send box-coords :assoc (elt (*paper* . bodies) (- x 1)))))

(defun reach-boxedge ()
  (setq target-coords (send box-edge-1 :copy-worldcoords))
  (send target-coords :rotate pi :y)
  (send target-coords :rotate -pi/2 :z)
  (send target-coords :rotate (deg2rad -45) :y)
  (send target-coords :translate #f(-10 0 0) :world)
  (send *hironxjsk* :larm :inverse-kinematics (send target-coords :copy-worldcoords)
        :revert-if-fail t
        :rotation-axis t
        :debug-view nil :thre 50
        :move-target (send *hironxjsk* :get :lhand-tip-coords))
  (send *irtviewer* :draw-objects)
  (send target-coords :translate #f(0 0 -40) :world)
  (send *hironxjsk* :larm :inverse-kinematics (send target-coords :copy-worldcoords)
        :revert-if-fail t
        :rotation-axis t
        :debug-view nil :thre 50
        :move-target (send *hironxjsk* :get :lhand-tip-coords))
  (send *irtviewer* :draw-objects))

(defun display-listcoords (listcoords)
  (setq listcoords-ob (list))
  (dotimes (i (length listcoords))
    (setq a (make-sphere 10))
    (send a :set-color :red)
    (push a listcoords-ob)
    (send (elt listcoords-ob 0) :move-to (elt listcoords i) :world)
    (push (elt listcoords-ob 0) ob-list))
  (objects ob-list)
  (send *irtviewer* :draw-objects))

(defun illustrate-fold ()
  (let ((prism-v1 (send (send box-edge-1 :copy-worldcoords) :worldpos))
        (prism-v2 (send (send (send box-edge-1 :copy-worldcoords) :translate (float-vector (* -1 (*paper* . paper-x-end)) 0 (* -1 box-z)) :world) :worldpos))
        (prism-v3 (elt (send (elt (*paper* . bodies) 13) :vertices) 0)))
    (dolist (i (send (elt (*paper* . bodies) 13) :vertices))
      (if (< (elt i 0) (elt prism-v3 0))
          (setq prism-v3 i)))
    (dolist (i (send (elt (*paper* . bodies) 13) :vertices))
      (if (> (elt i 1) (elt prism-v3 1))
          (setq prism-v3 i)))
    (setf (elt (*paper* . bodies) 9) (make-prism (list prism-v1 prism-v2 prism-v3) 5))
    (send (elt (*paper* . bodies) 9)  :set-color :goldenrod)
    (send box-coords :assoc (elt (*paper* . bodies) 9))))

(defun fold-sim ()
  (let* ((tcl (make-target-coords-list))
         (steps (length tcl))
         pop-lst
         ik-test
         current-angle-vector)
    (labels ((solve-ik (coords)
               (print coords)
               (push coords pop-lst)
               (setq current-angle-vector (send *hironxjsk* :angle-vector))
               (setq ik (send *hironxjsk* :larm :inverse-kinematics (send coords :copy-worldcoords)
                              :revert-fail t
                              :rotation-axis t
                              :debug-view nil :thre 50
                              :move-target (send *hironxjsk* :get :lhand-tip-coords)))
               (setq collision-check (hrpsys-collision-check (send *hironxjsk* :angle-vector)))
               (print collision-check)
               (if (equal collision-check nil)
                   (progn
                     (if (equal ik nil)
                         (progn
                           (setq msg (instance std_msgs::String :init))
                           (send msg :data (format nil "ik-collision"))
                           (ros::publish "/ik_collision" msg)
                           (send *ri* :spin-once)
                           (return-from solve-ik nil))
                         (progn
                           (setq ik-test t)
                           (return-from solve-ik ik))))
                   (progn
                     (setq msg (instance std_msgs::String :init))
                     (send msg :data (format nil "ik-collision"))
                     (ros::publish "/ik_collision" msg)
                     (send *ri* :spin-once)
                     (return-from solve-ik nil)))))
      (handler-bind ((ik-collision #'(lambda (cc)
                                       (setq ob-list (list *hironxjsk* *target-box* *paper*))
                                       (objects ob-list)
                                       (if (= (length pop-lst) 0)
                                           (push (pop tcl) pop-lst))
                                       (push (elt pop-lst 0) tcl)
                                       (dotimes (i (length tcl))
                                         (nsubstitute (send (send (elt tcl i) :copy-worldcoords) :translate #f(100 0 0) :world) (elt tcl i) tcl))
                                       (setq right-target-coords (send box-down-edge :copy-worldcoords))
                                       (send right-target-coords :rotate pi :x)
                                       (send right-target-coords :rotate pi/2 :z)
                                       (send *hironxjsk* :rarm :inverse-kinematics (send right-target-coords :copy-worldcoords)
                                             :revert-if-fail t
                                             :rotation-axis t
                                             :debug-view nil :thre 50
                                             :move-target (send *hironxjsk* :get :rhand-tip-coords))
                                       (send *irtviewer* :draw-objects)
                                       (unix::sleep 1)
                                       (send *hironxjsk* :rarm :move-end-pos #f(100 0 0) :world)
                                       (send box-coords :translate #f(100 0 0) :world)
                                       (send *irtviewer* :draw-objects)
                                       (unix::sleep 1)
                                       (send *hironxjsk* :rarm :inverse-kinematics (send right-initial-coords :copy-worldcoords)
                                             :revert-if-fail t
                                             :rotation-axis t
                                             :debug-view nil :thre 50
                                             :move-target (send *hironxjsk* :get :rhand-tip-coords))
                                       (send *irtviewer* :draw-objects)
                                       (unix::sleep 1)
                                       (display-listcoords tcl)
                                       (send *irtviewer* :draw-objects)
                                       (unix::sleep 1)
                                       )))
        (while tcl
          (print "here")
          (setq v (solve-ik (pop tcl)))
          ;; (print "read-line")
          ;; (read-line)
          (if (equal v nil)
              (print "collision or ik fail")
              (progn
                (send *hironxjsk* :angle-vector v)
                (send *irtviewer* :draw-objects)
                (unix::sleep 1)
                (send *hironxjsk* :start-grasp :larm)
                (send (elt (*paper* . bodies) 13) :rotate (/ pi/2 steps) :y)
                (send (elt (*paper* . bodies) 13) :translate (float-vector (/ (/ (*paper* . paper-x-end) 2) steps) 0 (* -1 (/ (/ (*paper* . paper-x-end) 2) steps))) :world)
                ;; (send (elt (*paper* . bodies) 0) :rotate (/ -pi/2 steps) :y)
                ;; (send (elt (*paper* . bodies) 0) :translate (float-vector (/ (/ (*paper* . paper-x-end) 2) steps) 0 (* -1 (/ (/ (*paper* . paper-x-end) 2) steps))) :world)
                (illustrate-fold)
                (objects ob-list)
                (unix::sleep 1)

                (setq current-lhand (send *hironxjsk* :hand-angle-vector :lhand))
                (setf (aref current-lhand 3) 20)
                (send *hironxjsk* :hand-angle-vector :lhand current-lhand)
                (send *irtviewer* :draw-objects)
                (unix::sleep 1)

                (send *hironxjsk* :stop-grasp :larm)
                (send *irtviewer* :draw-objects)
                (unix::sleep 1)))
          )))))
